// AI Chat Thread Styles
@import '../../ProseMirrorMixings.scss';

.ai-chat-thread-wrapper {
    position: relative;

    // border: 1px solid pink;

    // Thread boundary indicator: small circular element like AI response indicator
    .ai-thread-boundary-indicator {
        position: absolute;
        // border: 1px solid red;
        right: -47px; // position to the right of the thread content
        top: -6px; // position vertically similar to AI response indicators
        width: 32px; // circle container size (larger than icon for easier hover)
        height: 32px; // circle container size
        display: flex;
        align-items: center;
        justify-content: center;
        background: transparent; // invisible hover area
        border-radius: 50%; // make it circular
        z-index: 3;
        cursor: pointer;

        // NOTE: line is now a sibling of the indicator under the wrapper

        // Thread boundary icon styling
        .ai-thread-boundary-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            pointer-events: none; // let the parent boundary indicator handle interactions

            // Style the SVG icon
            svg {
                width: 20px;
                height: 20px;
                fill: $nightBlue; // match the gradient start color
                // filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.08));
            }
        }
    }

    // Thread boundary line anchored to wrapper (spans full thread height)
    .ai-thread-boundary-indicator-line {
        position: absolute;
        right: -15px; // align with left edge of circle indicator
        top: 0;
        bottom: 0; // stretch across full thread height
        width: 1px;
        background: $steelBlue;
        opacity: 0; // hidden by default
        transform: scaleY(0);
        min-height: 50px;
        opacity: 1;
        transform-origin: top;
        transition: pupOutTransition(all, 200ms);
        z-index: 5;
        pointer-events: none; // only the circle handles hover

        // Triangle pointer aligned near icon at the top, closer to the line
        @include boundaryPointerTriangle((
            direction: 'right',
            anchor: 'top',
            horizontalOffset: 0px,
            verticalOffset: 10px,
            size: 4px,
            color: $steelBlue,
            accentColor: $nightBlue
        ));
    }


    // Thread boundary visible state (applied via decorations on hover)
    &.thread-boundary-visible {
        .ai-thread-boundary-indicator-line {
            opacity: 1;
            transform: scaleY(1);
        }
    }

    // Receiving state styles (applied via decorations)
    &.receiving {
        .keyboard-shortcut-hint {
            border-color: $redPink;
            background-color: white;
            transition: hoverTransition(background, 300ms);

            .shortcut-default,
            .shortcut-hover {
                opacity: 0;
                pointer-events: none;
            }

            .shortcut-receiving {
                opacity: 1;
                pointer-events: auto;

                .stop-icon svg {
                    fill: $redPink;
                }

                .shortcut-label {
                    color: $redPink;
                }
            }

            // Hover over receiving state - only when in receiving mode
            &:hover {
                // Ensure default/hover states stay hidden during receiving hover
                .shortcut-default,
                .shortcut-hover {
                    opacity: 0 !important;
                    pointer-events: none !important;
                }

                .shortcut-receiving {
                    opacity: 1 !important;
                    pointer-events: auto !important;

                    .stop-icon svg {
                        fill: white;
                    }

                    .shortcut-label {
                        color: white;
                    }
                }

                // Add red background on hover
                background-color: $redPink;
                border-color: $redPink;
            }
        }
    }

    .ai-chat-thread-content {
        position: relative;
    }

    .keyboard-shortcut-hint {
        position: absolute;
        bottom: -0.75rem;
        right: 1rem;
        min-width: 85px; // Preserve width during state changes
        background: white;
        border: 1px solid rgba($steelBlue, 0.2);
        border-radius: 20px;
        font-size: 0.8rem;
        color: rgba($steelBlue, 0.7);
        opacity: 0.8;
        transition: hoverTransition(all, 400ms); // Longer transition for mouse leave
        box-shadow: 0 2px 8px rgba($steelBlue, 0.2);
        cursor: pointer;

        .shortcut-default,
        .shortcut-hover,
        .shortcut-receiving {
            display: flex;
            align-items: center;
            gap: 0.4rem;
            padding: 0.4rem 0.55rem;
            transition: hoverTransition(all, 250ms);
        }

        .shortcut-default {
            opacity: 1;
            position: relative; // ensure stacking below absolute states
            z-index: 1;
        }

        .shortcut-hover,
        .shortcut-receiving {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            opacity: 0;
            pointer-events: none;
        }

        // Layering: receiving above hover above default
        .shortcut-hover { z-index: 2; }
        .shortcut-receiving { z-index: 3; }

        .icons-container {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            width: 36px; // Reduced width to minimize empty space
            height: 20px; // Fixed height to prevent vertical movement
            // gap: 0.25rem;
            position: relative; // enable absolute positioning of animated icons
            overflow: hidden;   // keep animation within bounds
            // border: 1px solid red;
        }

        .shortcut-keys {
            display: flex;
            align-items: center;

            .key-icon {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                width: 17px;
                height: 17px;
                transition: pupOutTransition(all, 150ms);

                svg {
                    width: 13px;
                    height: 13px;
                    fill: rgba($steelBlue, 0.8);
                    transition: pupOutTransition(fill, 150ms);
                }
            }

            .key-text {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                padding: 0.15rem 0.4rem;
                font-size: 0.7rem;
                font-weight: 600;
                color: rgba($steelBlue, 0.8);
                line-height: 1;
                transition: pupOutTransition(all, 150ms);
            }
        }

        .send-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 18px;
            height: 18px;

            svg {
                width: 14px;
                height: 14px;
                fill: $steelBlue;
            }
        }

        // Slide animation: in hover state, move send icon from left to right inside icons-container
        .shortcut-hover {
            .send-icon {
                position: absolute;
                left: 0; // start at the left edge when hover content appears
                // Default (mouse out): short slide back
                transition: hoverTransition(left, 40ms);
            }
        }

        .stop-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 18px;
            height: 18px;

            svg {
                width: 18px;  // Increased from 14px to make stop icon more prominent
                height: 18px; // Increased from 14px to make stop icon more prominent
                fill: $redPink;
            }
        }

        .shortcut-label {
            font-weight: 500;
            color: rgba($steelBlue, 0.6);
        }

    // Note: normal hover styles are applied at the wrapper level when not receiving
    }

    // Normal hover state (only when NOT receiving AND NOT when keys are pressed)
    &:not(.receiving):not(.ai-chat-thread-keys-pressed) .keyboard-shortcut-hint:hover {
        opacity: 1;
        border-color: rgba($steelBlue, 0.3);
        transition: hoverTransition(all, 250ms);

        .shortcut-default { opacity: 0; pointer-events: none; }
        .shortcut-hover { opacity: 1; pointer-events: auto; }
        .shortcut-receiving { opacity: 0; pointer-events: none; }

        .shortcut-hover .shortcut-label { color: $steelBlue; }

        // Animate send icon to the right end during hover reveal
        .shortcut-hover .icons-container .send-icon {
            // Hover-in: longer, smoother slide
            transition: hoverTransition(left, 300ms);
            left: calc(100% - 18px); // container width minus icon width
        }
    }

    // Enhanced visibility when thread is focused
    &:focus-within .keyboard-shortcut-hint {
        opacity: 1;
        transform: translateY(-2px);
    }

    // Receiving state overrides (ensure visibility regardless of cascade order)
    &.receiving {
        .keyboard-shortcut-hint {
            // Hide non-receiving states
            .shortcut-default,
            .shortcut-hover {
                opacity: 0 !important;
                pointer-events: none !important;
            }

            // Always show receiving content
            .shortcut-receiving {
                opacity: 1 !important;
                pointer-events: auto !important;

                // Default placement: stop icon on the right, ready to slide left on hover
                .icons-container {
                    .stop-icon {
                        position: absolute;
                        left: calc(100% - 18px); // align to right (container width - icon width)
                        transition: hoverTransition(left, 150ms); // mouse-out timing
                    }
                }
            }

            // Keep receiving visible on hover
            &:hover {
                .shortcut-receiving {
                    opacity: 1 !important;
                    pointer-events: auto !important;

                    // Hover-in: slide stop icon left with same timing as send icon
                    .icons-container {
                        .stop-icon {
                            transition: hoverTransition(left, 300ms);
                            left: 7px;
                        }
                    }
                }
            }
        }
    }
}


// Keyboard feedback when keys are pressed (applied via ProseMirror decorations)
.ai-chat-thread-keys-pressed {
    .keyboard-shortcut-hint {
        .key-icon.cmd-key,
        .key-text.ctrl-key {
            color: $steelBlue !important;

            svg {
                fill: $steelBlue !important;
            }
        }
    }
}

// Enter key highlight (only when both mod and enter are pressed)
.ai-chat-thread-keys-pressed.mod-pressed.enter-pressed {
    .keyboard-shortcut-hint {
        .key-icon.enter-key {
            svg {
                fill: $steelBlue !important;
            }
        }
    }
}


.ai-response-message-wrapper {
	margin: 0;
	padding: 0.8rem 0 0.7rem;
	position: relative;
	.user-avatar {
		display: block;
		width:  21px;
		height:  21px;
		border-radius: 99px;
		position: absolute;
		user-select: none;
		left: -55px;
		bottom: 0.01rem;
		cursor: default;
		svg {
			fill: #94999d;
		}
		&.assistant-anthropic {
			left: -55.5px;
			svg {
				fill: #D97757;
				width:  21.5px;
				height:  21.5px;
			}
		}
		&.assistant-openai {
			overflow: hidden;
			svg {
				fill: $aiGreen;
			}
			&.node-receiving-animation {
				svg {
					animation: heartbeatAnimation 1.5s infinite;
					animation-timing-function: ease-in-out;
				}
			}
		}
	}

	.ai-response-message {
		position: relative;
		z-index: 2;
		margin: 0;
		display: flex;
		align-items: center;
		padding: 0;
		position: relative;
		// background: #fff;
		.ai-response-message-boundaries-indicator {
			position: absolute;
			left: -21px;
			display: block;
			height: 17px;
			height: 100%;
			width: $aiResponseMessageIndicatorBoundariesWidth;
			transition: height 400ms cubic-bezier(0.19, 1, 0.22, 1);
			background-color: $aiResponseMessageIndicatorColor;
			border-radius: 100px;

			// Use the reusable mixin for pointer triangle - points LEFT towards AI provider icon
			@include boundaryPointerTriangle((
				direction: 'left',
				anchor: 'bottom',
				horizontalOffset: 0px,
				verticalOffset: 8px,
				size: 3px,
				color: $aiResponseMessageIndicatorColor,
				accentColor: $aiResponseMessageIndicatorAccentPointerColor
			));
			&.node-render-animation {
				animation: popOutAndGrow 300ms cubic-bezier(0.19, 1, 0.22, 1);
			}

		}
		.ai-response-message-content {
			// padding: .3rem 0;
			padding: 0;
			// width: 100%; // TODO: this causes an unexpected weird fly-in-left animation effect, not sure if I want to keep it
			&.node-render-animation {
				animation: popOut 400ms cubic-bezier(0.19, 1, 0.22, 1);
			}
			h1, h2, h3, h4, h5, h6 {
				&:first-child {
					margin-top: 0;
				}
			}
		}
	}
}